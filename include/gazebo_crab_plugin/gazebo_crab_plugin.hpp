// ROS headers
#include <ros/ros.h>
#include <std_msgs/Float64.h>
#include <std_msgs/String.h>
#include <dynamic_reconfigure/server.h>
#include <gazebo_crab_plugin/dyn_paramsConfig.h>		// auto-generated, based on ../cfg/dyn_params.cfg

// header, as sugested in http://wiki.gazebosim.org/wiki/Tutorials/1.9/Creating_ROS_plugins_for_Gazebo
//#include <gazebo/common/Plugin.hh>

// GAZEBO headers
// headers, as sugested in http://gazebosim.org/tutorials?tut=plugins_model&cat=write_plugin
#include <gazebo/gazebo.hh>
#include <gazebo/physics/physics.hh>
#include <gazebo/common/common.hh>
#include <control_toolbox/pid.h>

#include <gazebo_crab_plugin/pid_joint_state.h>		// auto-generated by the project, based on msg/pid_joint_state.msg
#include <gazebo_crab_plugin/pid_joint_param.h>		// auto-generated by the project, based on msg/pid_joint_param.msg
#include <gazebo_crab_plugin/pid_joint_error.h>		// auto-generated by the project, based on msg/pid_joint_param.msg

// C++ headers
#include <stdio.h>

// BOOST headers
#include <boost/bind.hpp>










namespace gazebo {
	
	
	class PidJoint;
	
	
	class ModelPIDJoint : public ModelPlugin {
		
		public:
			/// @brief called when the plugin is loaded. initializes the object
			void Load( physics::ModelPtr parent, sdf::ElementPtr sdf );

			/// @brief called by the world update start event. in this function we update the state of all joints
			void OnUpdate( const common::UpdateInfo &/*_info*/ );
			
			/// @brief getter function to get a pointer to the node handle
			ros::NodeHandle* getNH() { return nh_; }
			
			void resetModel() {
				ROS_INFO( "resetting model" );
				model_->Reset();
			}
			
			
		private:
			/// @brief pointer to the model
			physics::ModelPtr model_;
			
			/// @brief pointer to the sdf object (required to obtain the namesapce via the robotNamespace parameter)
			sdf::ElementPtr sdf_;
			
			/// @brief ros node handle
			ros::NodeHandle *nh_;
			
			/// @brief pointer to the update event connection
			event::ConnectionPtr update_connection_;
			
			/// @brief list (vector) of PidJoint objects. we create one PidJoint object for every joint
			std::vector< PidJoint* > pid_joint_vec_;
			
	};
	
} // end of namespace































